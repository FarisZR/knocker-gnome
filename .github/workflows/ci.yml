name: CI

on:
  push:
    branches: [ main, develop, "copilot/**" ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install --save-dev eslint

      - name: Run ESLint
        run: npx eslint --ext .js . || true

  validate:
    name: Validate Extension
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install GNOME dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y glib-2.0 gettext

      - name: Validate metadata
        run: |
          if [ ! -f metadata.json ]; then
            echo "ERROR: metadata.json not found"
            exit 1
          fi
          echo "metadata.json exists"
          cat metadata.json

      - name: Validate GSettings schema
        run: |
          if [ ! -f schemas/*.gschema.xml ]; then
            echo "ERROR: GSettings schema not found"
            exit 1
          fi
          glib-compile-schemas --strict --dry-run schemas/
          echo "GSettings schema is valid"

      - name: Check JavaScript syntax
        run: |
          for file in *.js; do
            if [ -f "$file" ]; then
              node --check "$file"
              echo "✓ $file syntax OK"
            fi
          done

  build:
    name: Build Extension Package
    runs-on: ubuntu-latest
    needs: [lint, validate]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y glib-2.0 zip

      - name: Build extension
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: knocker-extension
          path: '*.shell-extension.zip'
          retention-days: 30

  test-metadata:
    name: Test Metadata Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check required metadata fields
        run: |
          python3 << 'EOF'
          import json
          import sys
          
          with open('metadata.json', 'r') as f:
              metadata = json.load(f)
          
          required_fields = ['name', 'description', 'uuid', 'shell-version']
          missing = [field for field in required_fields if field not in metadata]
          
          if missing:
              print(f"ERROR: Missing required fields: {', '.join(missing)}")
              sys.exit(1)
          
          # Check UUID format
          if not metadata['uuid'].endswith('@' + metadata['uuid'].split('@')[1]):
              print("WARNING: UUID should follow pattern 'name@domain.tld'")
          
          # Check shell-version is a list
          if not isinstance(metadata['shell-version'], list):
              print("ERROR: shell-version must be an array")
              sys.exit(1)
          
          print("✓ Metadata validation passed")
          print(f"  Extension: {metadata['name']}")
          print(f"  UUID: {metadata['uuid']}")
          print(f"  GNOME Shell versions: {', '.join(metadata['shell-version'])}")
          EOF
